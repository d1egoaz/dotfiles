#+TITLE: My emacs doom configuration
#+AUTHOR: Diego Alvarez
#+EMAIL: diego.canada@icloud.com
#+LANGUAGE: en
#+STARTUP: inlineimages

* Table of Contents                                                      :TOC_3:
- [[#install-emacs][Install Emacs]]
- [[#configuration][Configuration]]
  - [[#personal-information][Personal Information]]
    - [[#set-full-name-and-email][Set full name and email]]
  - [[#doom][Doom]]
    - [[#leader-key-similar-to-spacemacs-spc-m][Leader key similar to Spacemacs SPC-m]]
    - [[#load-private-modules][Load private modules]]
  - [[#emacs-core][Emacs core]]
    - [[#move-custom-configuration-to-its-own-file][Move custom configuration to its own file]]
    - [[#relative-line-numbers][Relative line numbers]]
    - [[#disable-lock-files][Disable lock files]]
    - [[#scroll-compilation-output-to-first-error][Scroll compilation output to first error]]
    - [[#backups][Backups]]
    - [[#which-key][Which key]]
    - [[#avoid-file-changed-on-disk-checking-message][Avoid file changed on disk checking message]]
    - [[#enables-narrowing][Enables narrowing]]
    - [[#include-underscores-and-hyphen-in-word-motions][Include underscores and hyphen in word motions]]
    - [[#whitespace-cleanup-on-buffer-save][Whitespace cleanup on buffer save]]
  - [[#ui][UI]]
    - [[#use-iosevka-ss04-with-font-ligatures][Use Iosevka SS04 with font ligatures]]
    - [[#disable-bold-fonts][Disable bold fonts]]
    - [[#theme-and-foreground-color][Theme and foreground color]]
    - [[#change-cursor-color-evil-mode][Change cursor color evil-mode]]
    - [[#enables-solaire-globally][Enables Solaire globally]]
  - [[#lang][Lang]]
    - [[#org][org]]
    - [[#go][go]]
    - [[#lsp][LSP]]
  - [[#packages][Packages]]
    - [[#avy][Avy]]
    - [[#counsel][Counsel]]
    - [[#deft][Deft]]
    - [[#emacs-anywhere][Emacs Anywhere]]
    - [[#emojify][Emojify]]
    - [[#evil][Evil]]
    - [[#exec-path-from-shell][Exec Path From Shell]]
    - [[#git-link][Git Link]]
    - [[#google-translate][Google Translate]]
    - [[#highlight-thing][Highlight Thing]]
    - [[#highlight-indent-guides][Highlight Indent Guides]]
    - [[#ivy][Ivy]]
    - [[#magit][Magit]]
    - [[#tldr][tl;dr]]
  - [[#misc][Misc]]
    - [[#add-to-list][Add to list]]
    - [[#popup-rules][Popup rules]]
  - [[#bindings][Bindings]]

* Install Emacs
Currently using emacs from: https://github.com/railwaycat/homebrew-emacsmacport

* Configuration
** Personal Information
*** Set full name and email
#+BEGIN_SRC emacs-lisp
(setq
 user-full-name "Diego Alvarez"
 user-mail-address "diego.canada@icloud.com")
#+END_SRC

** Doom
*** Leader key similar to Spacemacs SPC-m
#+BEGIN_SRC emacs-lisp
(setq doom-localleader-key ",")
#+END_SRC

*** Load private modules
#+BEGIN_SRC emacs-lisp
(load! "+funcs")
#+END_SRC

** Emacs core
*** Move custom configuration to its own file
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

*** Relative line numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC

*** Disable lock files
Disables .#file.ext creation.
#+BEGIN_SRC emacs-lisp
(setq  create-lockfiles nil)
#+END_SRC

*** Scroll compilation output to first error
#+BEGIN_SRC emacs-lisp
(setq compilation-scroll-output 'first-error)
#+END_SRC

*** Backups
#+BEGIN_SRC emacs-lisp
(setq
 auto-save-default t
 auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
 auto-save-interval 200
 auto-save-timeout 20
 backup-by-copying t
 backup-directory-alist '((".*" . "~/emacs_backups/per-save"))
 delete-by-moving-to-trash t
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 make-backup-files t ;; <- DISABLED
 vc-make-backup-files t
 version-control t)
#+END_SRC

*** Which key
#+BEGIN_SRC emacs-lisp
(setq  which-key-idle-delay 0.3)
#+END_SRC

*** Avoid file changed on disk checking message
#+BEGIN_SRC emacs-lisp
(setq revert-without-query '(".*"))
#+END_SRC
*** Enables narrowing
#+BEGIN_SRC emacs-lisp
(put 'narrow-to-defun  'disabled nil)
(put 'narrow-to-page   'disabled nil)
(put 'narrow-to-region 'disabled nil)
#+END_SRC

*** Include underscores and hyphen in word motions
#+BEGIN_SRC emacs-lisp
(add-hook! 'emacs-lisp-mode-hook (modify-syntax-entry ?- "w"))
(add-hook! 'after-change-major-mode-hook (modify-syntax-entry ?_ "w"))

#+END_SRC

*** Whitespace cleanup on buffer save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook #'whitespace-cleanup)
#+END_SRC
** UI
*** Use Iosevka SS04 with font ligatures
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'darwin)
    (setq doom-font (font-spec :family "Iosevka SS04" :size 16 :weight 'light)))
(if (eq system-type 'gnu/linux)
    (setq doom-font (font-spec :family "Iosevka SS04" :size 30)))

(setq +pretty-code-iosevka-font-name "Iosevka SS04")
#+END_SRC

*** Disable bold fonts
#+BEGIN_SRC emacs-lisp
(setq doom-themes-enable-bold nil)
#+END_SRC

*** Theme and foreground color
Loads the theme immediately, to modify faces afterwards.
#+BEGIN_SRC emacs-lisp
(load-theme 'doom-dracula t)
(set-foreground-color "#b2b2b2")
(doom-themes-set-faces nil
  '(default :foreground "#bbc2cf"))
(custom-set-faces!
  `(font-lock-variable-name-face :foreground "#56b6c2"))
#+END_SRC

*** Change cursor color evil-mode
#+BEGIN_SRC emacs-lisp
(setq
 evil-insert-state-cursor '((bar . 2) "#ff00ff")
 evil-normal-state-cursor '(box "#ff00ff"))
#+END_SRC

*** Enables Solaire globally
#+BEGIN_SRC emacs-lisp
(solaire-global-mode nil)
#+END_SRC

** Lang
*** org
#+BEGIN_SRC emacs-lisp
(after! org
  ;; fixes M-RET to create or elements
  (org-defkey org-mode-map [(meta return)] 'org-meta-return)
  (if (eq system-type 'darwin)
      (setq org-download-screenshot-method "screencapture -i %s"))
  (if (eq system-type 'gnu/linux)
      (setq org-download-screenshot-method "import  %s"))
  (setq
   org-agenda-files (list "~/gdrive/deft/gtd-inbox.org" "~/gdrive/deft/gtd-personal.org" "~/gdrive/deft/gtd-work.org" )
   org-agenda-span 16
   org-agenda-start-day "-3d"
   org-blank-before-new-entry '((heading . always) (plain-list-item . nil))
   org-clock-out-remove-zero-time-clocks nil
   org-confirm-babel-evaluate nil
   org-default-notes-file "~/gdrive/deft/notes.org"
   org-directory "~/gdrive/deft"
   org-download-heading-lvl nil
   org-download-image-dir "~/gdrive/deft/images"
   org-download-method 'directory
   org-log-into-drawer t
   org-refile-targets '(("~/gdrive/deft/gtd-inbox.org" :maxlevel . 1) ("~/gdrive/deft/gtd-personal.org" :level . 1) ("~/gdrive/deft/gtd-work.org" :maxlevel . 2))
   org-src-fontify-natively t
   org-startup-with-inline-images t
   org-todo-keywords '((sequence "TODO(t!)" "WAITING(w!)" "|" "DONE(d!)" "CANCELLED(c!)")) ;; ! is to log event on logbook drawer
   org-capture-templates
   '(
     ;; example:
     ;;   "t"                               = key
     ;;   "Todo"                            = description
     ;;   entry                             = type
     ;;   (file+headline "file" "tasks")    = target
     ;;   ""                                = template
     ;;   :prepend t                        = properties
     ;; https://orgmode.org/manual/Template-expansion.html
     ("t" "Todo" entry (file+headline "~/gdrive/deft/gtd-inbox.org" "Inbox")
      "* TODO %?\nCreated on on %U\n" :prepend t :empty-lines 1)
     ("l" "Link" entry (file+headline "~/gdrive/deft/notes.org" "Links")
      "* %? %^L %^g \n%T" :prepend t)
     ("n" "Note" entry (file+headline "~/gdrive/deft/notes.org" "Notes")
      "* %^{title}%^g\n%T\n\n%?" :prepend t)
     ("j" "Journal" entry (file+olp+datetree "~/gdrive/deft/journal.org")
      "* %?" :clock-in t :clock-resume t))
   )

  (add-hook 'org-mode-hook #'visual-line-mode)) ;; http://superuser.com/questions/299886/linewrap-in-org-mode-of-emacs

#+END_SRC
*** go
**** Get latest gopls
#+BEGIN_EXAMPLE
cd /tmp && GO111MODULE=on go get golang.org/x/tools/gopls@latest
#+END_EXAMPLE

**** go-mode
#+BEGIN_SRC emacs-lisp
(after! go-mode
  (add-hook! 'go-mode-hook
    (add-hook 'before-save-hook #'gofmt-before-save))
  (add-hook 'go-mode-hook #'flyspell-prog-mode)
  (setq
   ;; uses go provided tools
   godef-command "go doc" ;; original godef
   gofmt-command "goimports")) ;; original gofmt
#+END_SRC

*** LSP
#+BEGIN_SRC emacs-lisp
(after! lsp-ui
  (setq
   lsp-ui-doc-enable t
   lsp-ui-doc-header t
   lsp-ui-doc-include-signature t
   lsp-ui-doc-position 'top ;; top, bottom, or at-point
   lsp-ui-doc-max-width 150
   lsp-ui-doc-max-height 30
   lsp-ui-doc-use-childframe t
   lsp-ui-doc-use-webkit t
   lsp-ui-sideline-enable nil))
#+END_SRC

** Packages
*** Avy
#+BEGIN_SRC emacs-lisp
(setq
 avy-all-windows 'all-frames
 avy-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l ?e ?i ?r ?u ?q ?p)
 ;; used for avy-goto-char-timer
 avy-timeout-seconds 0.3)
#+END_SRC

*** Counsel
Shows all files, including hidden files, ignores files =.= and =..=
#+BEGIN_SRC emacs-lisp
(after! counsel
  (setq counsel-find-file-ignore-regexp (regexp-opt '("./" "../"))))
#+END_SRC

*** Deft
#+BEGIN_SRC emacs-lisp
(setq
 deft-directory "~/gdrive/deft"
 deft-use-filename-as-title t)
#+END_SRC

*** Emacs Anywhere
#+BEGIN_SRC emacs-lisp
(defun github-conversation-p (window-title)
  (or (string-match-p "Pull Request" window-title)
      (string-match-p "Issue" window-title)
      ;; ...
      ))

(defun popup-handler (app-name window-title x y w h)
  (unless (zerop w)
    (set-frame-size (selected-frame) 1000 500 t))
  ;; set major mode
  (cond
   ((github-conversation-p window-title) (gfm-mode))
   ;; ...
   (t (markdown-mode)) ; default major mode
   ))
(add-hook 'ea-popup-hook #'popup-handler)
#+END_SRC

*** Emojify
#+BEGIN_SRC emacs-lisp
(setq emojify-emoji-set "twemoji-v2"
      emojify-display-style 'unicode)
#+END_SRC
*** Evil
**** Stay on the original character when leaving insert mode
#+BEGIN_SRC emacs-lisp
(setq
 evil-move-cursor-back nil
 evil-shift-round nil)
#+END_SRC

**** Disable arrow keys
#+BEGIN_SRC emacs-lisp
(define-key evil-insert-state-map [left] 'undefined)
(define-key evil-insert-state-map [right] 'undefined)
(define-key evil-insert-state-map [up] 'undefined)
(define-key evil-insert-state-map [down] 'undefined)
(define-key evil-motion-state-map [left] 'undefined)
(define-key evil-motion-state-map [right] 'undefined)
(define-key evil-motion-state-map [up] 'undefined)
(define-key evil-motion-state-map [down] 'undefined)
#+END_SRC

**** Disable mouse
Mouse is to far from the hand.
#+BEGIN_SRC emacs-lisp
(defun nothing())
(define-key evil-normal-state-map (kbd "<down-mouse-1>") 'nothing)
(dolist (mouse '("<mouse-1>" "<mouse-2>" "<mouse-3>"
                 "<up-mouse-1>" "<up-mouse-2>" "<up-mouse-3>"
                 "<down-mouse-1>" "<down-mouse-2>" "<down-mouse-3>"
                 "<drag-mouse-1>" "<drag-mouse-2>" "<drag-mouse-3>"
                 "<mouse-4>" "<mouse-5>"
                 "<up-mouse-4>" "<up-mouse-5>"
                 "<down-mouse-4>" "<down-mouse-5>"
                 "<drag-mouse-4>" "<drag-mouse-5>"
                 "<wheel-up>" "<wheel-down>" "<wheel-left>" "<wheel-right>"))
  (global-unset-key (kbd mouse)))
(fset 'evil-visual-update-x-selection 'ignore)
#+END_SRC

*** Exec Path From Shell
#+BEGIN_SRC emacs-lisp
(setq
 exec-path-from-shell-check-startup-files nil
 exec-path-from-shell-variables '("PATH" "GOPATH" "GOROOT"))
(exec-path-from-shell-initialize)
#+END_SRC

*** Git Link
#+BEGIN_SRC emacs-lisp
(setq git-link-open-in-browser t)
#+END_SRC

*** Google Translate
#+BEGIN_SRC emacs-lisp
(setq google-translate-default-source-language "en"
      google-translate-default-target-language "sp")
#+END_SRC
*** Highlight Thing
#+BEGIN_SRC emacs-lisp
(after! highlight-thing-mode
  (setq
   highlight-thing-limit-to-region-in-large-buffers-p t
   highlight-thing-case-sensitive-p t
   highlight-thing-limit-to-defun t
   highlight-thing-exclude-thing-under-point t))

(doom-themes-set-faces nil
  '(highlight-thing :foreground "orange" :background "black"))

(add-hook! '(prog-mode-hook conf-mode yaml-mode emacs-lisp-mode) #'highlight-thing-mode)
#+END_SRC

*** Highlight Indent Guides
#+BEGIN_SRC emacs-lisp
(setq highlight-indent-guides-method 'character)
(add-hook 'focus-in-hook #'highlight-indent-guides-auto-set-faces)
(add-hook! '(yaml-mode-hook prog-mode) #'highlight-indent-guides-mode)
#+END_SRC

*** Ivy
**** Remove ./ and ../ from file commands
#+BEGIN_SRC emacs-lisp
(setq
 ivy-extra-directories nil)
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp
(after! magit
  (setq magit-refs-show-commit-count nil
        magit-diff-refine-hunk t ;; show whitespaces changes on the selected git diff hunks
        magit-revision-show-gravatars nil
        magit-process-popup-time -1
        magit-branch-rename-push-target nil
        magit-log-arguments '("-n50" "--decorate")  ;; was: '("-n256" "--graph" "--decorate")
        magit-log-section-arguments  '("-n50" "--decorate") ;; was: ("-n256" "--decorate")
        magit-log-select-arguments '("-n50" "--decorate")  ;; was: '("-n256" "--decorate")
        ;; magit hunk highlight whitespace, https://github.com/magit/magit/issues/1689
        smerge-refine-ignore-whitespace nil)
  (remove-hook! 'magit-status-sections-hook 'magit-insert-unpushed-to-pushremote)
  (remove-hook! 'magit-status-sections-hook 'magit-insert-unpushed-to-upstream-or-recent)
  ;; automatic spellchecking in commit messages
  (add-hook 'git-commit-setup-hook #'git-commit-turn-on-flyspell))
;; (remove-hook! 'magit-refs-sections-hook 'magit-insert-tags) ;; remove tags from ref section
;; (remove-hook! 'server-switch-hook 'magit-commit-diff)) ;; remove diff on commiting
#+END_SRC

*** tl;dr
#+BEGIN_SRC emacs-lisp
(after! tldr
  (setq tldr-directory-path (concat doom-etc-dir "tldr/")))
#+END_SRC

** Misc

*** Add to list
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.aliases\\'" . sh-mode))
#+END_SRC

*** Popup rules
#+BEGIN_SRC emacs-lisp
(set-popup-rule! "^\\*doom:vterm*" :ignore t :select t :quit t)
#+END_SRC

** Bindings
#+BEGIN_SRC emacs-lisp
;; Unbind keys
(map! :leader
      "A" nil
      "X" nil
      "w -" nil
      "h P" nil
      )

(map! :leader "`" #'evil-switch-to-windows-last-buffer)

;; Leader key
(map!
 ;; Text-scaling
 "M-+" (λ! (text-scale-set 0))
 "M-=" #'text-scale-increase
 "M--" #'text-scale-decrease

 (:when (featurep! :completion ivy)
   (:map ivy-minibuffer-map
     "C-j" 'ivy-next-line
     "C-k" 'ivy-previous-line
     "C-h" (kbd "DEL")))

 ;; https://github.com/suonlight/multi-libvterm
 (:when (featurep! :term vterm)
   (:map vterm-mode-map
     :ni "C-j"     'vterm--self-insert
     :ni "C-k"     'vterm--self-insert
     :ni "C-d"     'vterm--self-insert
     :ni "C-SPC"   'vterm--self-insert
     :i "<return>" (λ! (interactive) (process-send-string vterm--process "\C-m"))))

 (:leader
   :nv ";" nil ;; unbind eval
   :desc "Toggle last popup"  "~" #'+popup/toggle
   :desc "M-x"                    "SPC" #'execute-extended-command
   :desc "Find file in project"   "."   #'projectile-find-file
   :desc "Expand region"          ">"   #'er/expand-region
   (:desc "+apps" :prefix "a"
     :desc "undo tree"                   "u" #'undo-tree-visualize
     :desc "org capture"                 "o" #'counsel-org-capture
     :desc "List process"                "p" #'list-processes
     :desc "Kill process"                "P" #'counsel-list-processes
     :desc "align regexp"                "x" #'align-regexp)
   (:desc "+buffer" :prefix "b"
     :desc "safe erase buffer"           "e" #'spacemacs/safe-erase-buffer
     :desc "kill current buffer"         "d" #'kill-current-buffer
     :desc "Last buffer"                 "l" #'evil-switch-to-windows-last-buffer
     :desc "yank buffer name"            "y" #'diego/copy-buffer-name
     :desc "copy buffer to clipboard"    "Y" #'spacemacs/copy-whole-buffer-to-clipboard)
   (:desc "+error" :prefix "e"
     :desc "Flycheck list errors"        "l" #'flycheck-list-errors
     :desc "Disable flycheck"            "d" #'flycheck-disable-checker
     :desc "Enable flycheck"             "C" #'flycheck-buffer
     :desc "Flycheck next error"         "n" #'flycheck-next-error
     :desc "Flycheck previous error"     "p" #'flycheck-previous-error
     :desc "Flycheck clear errors"       "c" #'flycheck-clear
     :desc "Flycheck which checker"      "w" #'flycheck-select-checker)
   (:desc "+file" :prefix "f"
     :desc "jump to file"                "j" #'counsel-file-jump)
   (:desc "+git" :prefix "g"
       :desc "Magit status"              "s" #'magit-status
      (:desc "+list/link" :prefix "l"
        :desc "git link line/region"     "l" #'+vc/git-browse-region-or-line
        :desc "git link line/region"     "L" (λ! (interactive) (+vc/git-browse-region-or-line "master"))
        :desc "git link home"            "h" #'git-link-homepage))
   (:desc "+help" :prefix "h"
     (:prefix ("P" . "Profiler")
       :desc "Profiler start"            "s" #'profiler-start
       :desc "Profiler stop"             "k" #'profiler-stop
       :desc "Profiler report"           "r" #'profiler-report))
   (:desc "+insert" :prefix "i"
     :desc "insert line above"           "k" #'spacemacs/evil-insert-line-above
     :desc "insert line below"           "j" #'spacemacs/evil-insert-line-below)
   (:desc "+jump" :prefix "j"
     :desc "Jump to symbol"              "i" #'imenu
     :desc "Jump to link"                "l" #'ace-link
     :desc "Avy jump work"               "j" #'avy-goto-char-timer)
   (:desc "+lang" :prefix "l"
     :desc "Describe thing at point"     "." #'lsp-describe-thing-at-point
     (:prefix ("g" . "Go to")
       :desc "Implementation"            "i" #'lsp-goto-implementation
       :desc "Definition"                "d" #'lsp-goto-type-definition)
     (:prefix ("f" . "Find")
       :desc "Definition"                "d" #'lsp-find-definition
       :desc "References"                "r" #'lsp-find-references)
     (:prefix ("l" . "Lens")
       :desc "Show"                      "l" #'lsp-lens-show
       :desc "Hide"                      "q" #'lsp-lens-hide)
     (:prefix ("m" . "menu")
       :desc "Show"                      "m" #'lsp-ui-imenu
       :desc "Hide"                      "q" #'lsp-ui-imenu--kill)
     (:prefix ("r" . "refactor")
       :desc "Rename"                    "r" #'lsp-rename))
   (:desc "+narrow/notes" :prefix "n"
     :desc "narrow region"   "r" #'narrow-to-region
     :desc "narrow defun"   "f" #'narrow-to-defun
     :desc "narrow widen"   "w" #'widen)
   (:desc "+open" :prefix "o"
     :desc "delete last character eol"   "d" #'diego/delete-last-character-end-of-line
     :desc "highliht symbol at point"    "h" #'highlight-symbol-at-point
     :desc "remove highlight symbol"     "H" #'hi-lock-unface-buffer)
   (:desc "+project" :prefix "p"
     :desc "Find file in project"        "f" #'projectile-find-file)
   (:desc "+search" :prefix "s"
     :desc "iedit"                       "e" #'iedit-mode ;; next item [TAB]
     :desc "Search buffer"               "s" #'swiper-isearch
     :desc "Search project"              "p" #'+default/search-project
     :desc "Look up online"              "o" #'+lookup/online-select)
   (:desc "+toggle" :prefix "t"
     :desc "Toggle truncate lines"       "t" #'toggle-truncate-lines)
   (:desc "+window" :prefix "w"
     :desc "Split window right"        "/" #'split-window-right
     :desc "Split window below"        "-" #'split-window-below)))

(after! org
  (map! :map org-mode-map
        :n "M-j" #'org-metadown
        :n "M-k" #'org-metaup))

(map!
  (:after lsp-ui-peek
   :map lsp-ui-peek-mode-map
   "C-p" #'lsp-ui-peek--select-prev-file
   "C-j" #'lsp-ui-peek--select-next
   "C-k" #'lsp-ui-peek--select-prev
   "C-n" #'lsp-ui-peek--select-next-file))
#+END_SRC
