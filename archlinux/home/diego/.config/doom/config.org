#+TITLE: My emacs doom configuration
#+AUTHOR: Diego Alvarez
#+EMAIL: diego.canada@icloud.com
#+LANGUAGE: en
#+STARTUP: inlineimages

* Table of Contents                                                      :TOC_3:
- [[#install-emacs][Install Emacs]]
- [[#env-variables][env variables]]
- [[#important-doom-emacs-information][Important doom-emacs information]]
- [[#personal-information][Personal Information]]
  - [[#set-full-name-and-email][Set full name and email]]
- [[#emacs-core][Emacs core]]
  - [[#constants][Constants]]
  - [[#improve-keyboard-layout-command-control][Improve keyboard layout command->control]]
  - [[#start-in-full-screen-mode][Start in full screen mode]]
  - [[#scrach-default-mode][Scrach default mode]]
  - [[#authinfo][Authinfo]]
  - [[#move-custom-configuration-to-its-own-file][Move custom configuration to its own file]]
  - [[#relative-line-numbers][Relative line numbers]]
  - [[#disable-lock-files][Disable lock files]]
- [[#scroll-compilation-output-to-first-error][Scroll compilation output to first error]]
- [[#backups][Backups]]
- [[#which-key][Which key]]
- [[#avoid-file-changed-on-disk-checking-message][Avoid file changed on disk checking message]]
- [[#enables-narrowing-functions][Enables narrowing functions]]
- [[#include-underscores-and-hyphen-in-word-motions][Include underscores and hyphen in word motions]]
- [[#whitespace-cleanup-on-buffer-save][Whitespace cleanup on buffer save]]
- [[#delete-by-moving-to-trash][Delete by moving to trash]]
- [[#ui][UI]]
  - [[#use-iosevka-ss08-with-font-ligatures][Use Iosevka SS08 with font ligatures]]
  - [[#disable-bold-fonts][Disable bold fonts]]
  - [[#theme-and-foreground-color][Theme and foreground color]]
  - [[#change-cursor-color-evil-mode][Change cursor color evil-mode]]
- [[#lang][Lang]]
  - [[#company][Company]]
  - [[#org][org]]
    - [[#general][General]]
    - [[#bullet-list][bullet list]]
  - [[#go][go]]
    - [[#get-latest-gopls][Get latest gopls]]
    - [[#go-mode][go-mode]]
  - [[#lsp][LSP]]
  - [[#plantuml][plantuml]]
- [[#packages][Packages]]
  - [[#avy][Avy]]
  - [[#counsel][Counsel]]
  - [[#deft][Deft]]
  - [[#emacs-anywhere][Emacs Anywhere]]
  - [[#evil][Evil]]
    - [[#general-1][general]]
    - [[#stay-on-the-original-character-when-leaving-insert-mode][Stay on the original character when leaving insert mode]]
    - [[#disable-arrow-keys][Disable arrow keys]]
    - [[#disable-mouse][Disable mouse]]
  - [[#exec-path-from-shell][Exec Path From Shell]]
  - [[#git-link][Git Link]]
  - [[#google-translate][Google Translate]]
  - [[#highlight-thing][Highlight Thing]]
  - [[#ivy][Ivy]]
    - [[#remove--and--from-file-commands][Remove ./ and ../ from file commands]]
    - [[#show-hydra-when-pressing-c-o][Show hydra when pressing C-o]]
    - [[#childframe-fixed-position][childframe fixed position]]
  - [[#magit][Magit]]
    - [[#tune-magit][Tune magit]]
    - [[#set-project-list][Set project list]]
  - [[#projectile][Projectile]]
  - [[#tldr][tl;dr]]
  - [[#elfeed][elfeed]]
  - [[#engine-mode][engine-mode]]
  - [[#atomic-chrome][atomic-chrome]]
- [[#misc][Misc]]
  - [[#set-default-modes-to-some-specific-file-extensions][Set default modes to some specific file extensions]]
  - [[#popup-rules][Popup rules]]
- [[#doom][Doom]]
  - [[#leader-key-similar-to-spacemacs-spc-m][Leader key similar to Spacemacs SPC-m]]
  - [[#load-private-modules][Load private modules]]
  - [[#bindings][Bindings]]
  - [[#disable-inserting-the-comment-syntax-on-newlines-when-editing-an-existing-comment][Disable inserting the comment syntax on newlines when editing an existing comment]]
  - [[#keycast][keycast]]
  - [[#workspaces][workspaces]]
  - [[#pretty-code][pretty-code]]
  - [[#completion][Completion]]
  - [[#imenu][imenu]]
  - [[#gnutls][gnutls]]
  - [[#olivetti][olivetti]]
  - [[#so-long][so-long]]

* Install Emacs
Currently using emacs from: https://github.com/d12frosted/homebrew-emacs-plus
```
brew tap d12frosted/emacs-plus
brew install emacs-plus@28 --with-jansson --with-no-frame-refocus
```

* env variables
Remember to run =doom env= after changing env variables.

* Important doom-emacs information
- All variables definition containing files/directories should be outside
  =(after! ...)=
* Personal Information
** Set full name and email
#+BEGIN_SRC elisp
(setq
 user-full-name "Diego Alvarez"
 user-mail-address "diego.canada@icloud.com")
#+END_SRC

* Emacs core
** Constants
#+BEGIN_SRC elisp
(defconst IS-MAC     (eq system-type 'darwin))
(defconst IS-LINUX   (eq system-type 'gnu/linux))
#+END_SRC

** Improve keyboard layout command->control
#+BEGIN_SRC elisp
;; +-----+-----+-----+-----+-------------------+-----+-----+
;; |     |     |     |     |                   |     |     |
;; |Fn   |Ctrl |Optn |Cmd  |       Space       |Cmd  |Optn | [arrows]
;; +-----+-----+-----+-----+-------------------+-----+-----+
;; not needed if using karabiner
;; (when IS-MAC
;;   (setq
;;    ns-command-modifier 'control
;;    ns-option-modifier 'meta
;;    ns-control-modifier 'super
;;    ns-function-modifier 'hyper))
#+END_SRC
** Start in full screen mode
#+BEGIN_SRC elisp
;; (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+END_SRC
** Scrach default mode
#+BEGIN_SRC elisp
(setq initial-major-mode 'org-mode)
#+END_SRC

** Authinfo
Sensitive credentials. Only use ~/.authinfo.gpg, rather than doom’s default
#+BEGIN_SRC elisp
(setq auth-sources '("~/.authinfo.gpg"))
#+END_SRC

** Move custom configuration to its own file
#+BEGIN_SRC elisp
(setq custom-file "~/.emacs.d/custom.el")
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

** Relative line numbers
#+BEGIN_SRC elisp
;; (setq display-line-numbers-type 'relative)
(setq display-line-numbers-type nil)
#+END_SRC

** Disable lock files
Disables .#file.ext creation.

#+BEGIN_SRC elisp
(setq  create-lockfiles nil)
#+END_SRC

* Scroll compilation output to first error
#+BEGIN_SRC elisp
(setq compilation-scroll-output 'first-error)
#+END_SRC

* Backups
#+BEGIN_SRC elisp
(setq
 auto-save-default t
 auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
 auto-save-interval 200
 auto-save-timeout 20
 backup-by-copying t
 backup-directory-alist '((".*" . "~/emacs_backups/per-save"))
 delete-by-moving-to-trash t
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 make-backup-files t ;; <- DISABLED
 vc-make-backup-files t
 version-control t)
#+END_SRC

* Which key
#+BEGIN_SRC elisp
(setq  which-key-idle-delay 0.3)
#+END_SRC

* Avoid file changed on disk checking message
#+BEGIN_SRC elisp
(setq revert-without-query '(".*"))
#+END_SRC
* Enables narrowing functions
#+BEGIN_SRC elisp
(put 'narrow-to-defun  'disabled nil)
(put 'narrow-to-page   'disabled nil)
(put 'narrow-to-region 'disabled nil)
#+END_SRC

* Include underscores and hyphen in word motions
='after-change-major-mode-hook= to change every mode.

#+BEGIN_SRC elisp
(add-hook! 'after-change-major-mode-hook (modify-syntax-entry ?_ "w"))
(add-hook! 'after-change-major-mode-hook (modify-syntax-entry ?- "w"))
#+END_SRC

* Whitespace cleanup on buffer save
#+BEGIN_SRC elisp
(add-hook 'before-save-hook #'whitespace-cleanup)
#+END_SRC
* Delete by moving to trash
#+BEGIN_SRC elisp
(setq delete-by-moving-to-trash IS-MAC)
#+END_SRC

* UI
** Use Iosevka SS08 with font ligatures

#+attr_html: :width 200
[[attach:_20191224_113829screenshot.png]]

#+BEGIN_SRC elisp
(if (eq system-type 'darwin)
    (setq doom-font (font-spec :family "Iosevka SS08" :size 14)))
(if (eq system-type 'gnu/linux)
    (setq doom-font (font-spec :family "Iosevka SS08" :size 30)))

(setq doom-variable-pitch-font (font-spec :family "Microsoft Sans Serif"))

(setq +pretty-code-iosevka-font-name "Iosevka SS08")
#+END_SRC

** Disable bold fonts
#+BEGIN_SRC elisp
;; (setq doom-themes-enable-bold nil)
#+END_SRC

** Theme and foreground color
Loads the theme immediately, to modify faces afterwards.
#+BEGIN_SRC elisp
(setq modus-themes-slanted-constructs t ; use slanted text (italics) unless it is absolutely necessary, strings and code comments
      modus-themes-fringes 'subtle ; {nil,'subtle,'intense}
      modus-themes-syntax 'all-syntax ; Lots of options---continue reading the manual
      modus-themes-paren-match 'intense-bold ; {nil,'subtle-bold,'intense,'intense-bold}
      modus-themes-prompts 'intense ; {nil,'subtle,'intense}
      modus-themes-completions 'opinionated ; {nil,'moderate,'opinionated}
      modus-themes-region 'bg-only-no-extend ; {nil,'no-extend,'bg-only,'bg-only-no-extend}
      modus-themes-org-blocks 'grayscale ; {nil,'grayscale,'rainbow}
      modus-themes-headings ; Lots of options---continue reading the manual
      '((1 . section)
        (2 . section-no-bold)
        (3 . rainbow-line)
        (t . rainbow-line-no-bold))
      modus-themes-scale-headings t
      modus-themes-scale-1 1.1
      modus-themes-scale-2 1.15
      modus-themes-scale-3 1.21
      modus-themes-scale-4 1.27
      modus-themes-scale-5 1.33)

(load-theme 'modus-operandi t)

(setq doom-theme 'modus-operandi) ; light theme
;; (load-theme 'modus-vivendi t); dark theme
(custom-set-faces!
  `(lsp-ui-doc-background :background "darkgray"))
#+END_SRC

** Change cursor color evil-mode
#+BEGIN_SRC elisp
(setq
 evil-insert-state-cursor '((bar . 2) "#ff00ff")
 evil-normal-state-cursor '(box "#ff00ff"))
#+END_SRC

* Lang
** Company
#+BEGIN_SRC elisp
(after! company
  (setq company-idle-delay 0.5)
  (setq company-minimum-prefix-length 1))

#+END_SRC
** org
*** General
#+BEGIN_SRC elisp
(if (eq system-type 'darwin)
    (setq org-download-screenshot-method "screencapture -i %s"))
(if (eq system-type 'gnu/linux)
    (setq org-download-screenshot-method "import  %s"))
(setq
 org-directory "~/gdrive/deft"
 org-agenda-files (list "~/gdrive/deft/gtd-inbox.org" "~/gdrive/deft/gtd-personal.org" "~/gdrive/deft/gtd-work.org" )
 org-attach-id-dir (file-name-as-directory (concat (file-name-as-directory org-directory) "images"))
 org-attach-directory org-attach-id-dir
 org-default-notes-file (concat (file-name-as-directory org-directory) "notes.org")
 org-download-image-dir org-attach-directory
 org-refile-targets '(("~/gdrive/deft/gtd-inbox.org" :maxlevel . 1) ("~/gdrive/deft/gtd-personal.org" :level . 1) ("~/gdrive/deft/gtd-work.org" :maxlevel . 2)))


(after! org
  ;; fixes M-RET to create or elements
  ;; (org-defkey org-mode-map [(meta return)] 'org-meta-return)
  (setq
   org-agenda-span 16
   org-agenda-start-day "-3d"
   org-blank-before-new-entry '((heading . nil) (plain-list-item . nil))
   org-clock-out-remove-zero-time-clocks nil
   org-confirm-babel-evaluate nil
   org-download-heading-lvl nil
   org-download-method 'directory
   org-fontify-quote-and-verse-blocks nil ; When nil, format these as normal Org. This is the default, because the content of these blocks will still be treated as Org syntax.
   org-fontify-whole-heading-line nil; Non-nil means fontify the whole line for headings.
   org-hide-leading-stars nil
   org-log-into-drawer t
   org-src-fontify-natively t
   org-startup-with-inline-images t
   org-startup-indented t
   org-startup-truncatd nil
   org-download-image-html-width 500
  org-tags-column -80
   ;; ! is to log event on logbook drawer
   ;; char defines a fast-access key for the state name
   org-todo-keywords '((sequence "TODO(t!)" "WAITING(w!)" "|" "DONE(d!)" "CANCELLED(c!)"))
   org-capture-templates
   '(
     ;; example:
     ;;   "t"                               = key
     ;;   "Todo"                            = description
     ;;   entry                             = type
     ;;   (file+headline "file" "tasks")    = target
     ;;   ""                                = template
     ;;   :prepend t                        = properties
     ;; https://orgmode.org/manual/Template-expansion.html
     ("t" "Todo" entry (file+headline "~/gdrive/deft/gtd-inbox.org" "Inbox")
      "* TODO %?\nCreated on on %U\n" :prepend t :empty-lines 1)
     ("l" "Link" entry (file+headline "~/gdrive/deft/notes.org" "Links")
      "* %? %^L %^g \n%T" :prepend t)
     ("n" "Note" entry (file+headline "~/gdrive/deft/notes.org" "Notes")
      "* %^{title}%^g\n%T\n\n%?" :prepend t)
     ("j" "Journal" entry (file+olp+datetree "~/gdrive/deft/journal.org")
      "* %?" :clock-in t :clock-resume t)))

  (remove-hook 'org-mode-hook #'org-superstar-mode))
#+END_SRC

#+RESULTS:

*** bullet list
#+BEGIN_SRC elisp
(setq org-bullets-bullet-list '("✸" "●" "◉" "○" "◌"))
#+END_SRC

** go
*** Get latest gopls
#+BEGIN_EXAMPLE
cd /tmp && GO111MODULE=on go get golang.org/x/tools/gopls@latest
#+END_EXAMPLE

*** go-mode
#+BEGIN_SRC elisp
(after! go-mode
  (add-hook! 'go-mode-hook
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t)
    (add-hook 'go-mode-hook #'flyspell-prog-mode))
  (setq
   ;; uses go provided tools
   godef-command "go doc" ; original godef
   gofmt-command "goimports" ; original gofmt
   lsp-gopls-hover-kind "FullDocumentation"))

(after! lsp-mode
  (lsp-register-custom-settings '(("gopls.completeUnimported" t t) ("gopls.staticcheck" t t))))

#+END_SRC

** LSP
#+BEGIN_SRC elisp
(after! lsp-ui
  (setq
   lsp-signature-auto-activate t          ; Show signature of current function.
   lsp-ui-doc-delay 1
   lsp-ui-doc-enable t
   lsp-ui-doc-header t
   lsp-ui-doc-include-signature t
   lsp-ui-doc-max-height 30
   lsp-ui-doc-max-width 150
   lsp-ui-doc-position 'at-point ;'top ;; top, bottom, or at-point
   lsp-ui-doc-show-with-mouse nil  ; don't disappear on mouseover
   lsp-ui-doc-use-childframe t
   lsp-ui-peek-enable nil
   lsp-ui-sideline-show-hover nil) ; shows all variables types in sideline
  (add-to-list 'lsp-ui-doc-frame-parameters '(no-accept-focus . t))
)
#+END_SRC

#+RESULTS:

** plantuml
#+BEGIN_SRC elisp
(setq plantuml-default-exec-mode 'jar)
#+END_SRC

* Packages
** Avy
#+BEGIN_SRC elisp
(setq
 avy-all-windows 'all-frames
 avy-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l ?e ?i ?r ?u ?q ?p)
 ;; used for avy-goto-char-timer
 avy-timeout-seconds 0.3)
#+END_SRC

** Counsel
Shows all files, including hidden files, ignores files =.= and =..=
#+BEGIN_SRC elisp
(after! counsel
  (setq counsel-find-file-ignore-regexp (regexp-opt '("./" "../")))
  ;; (push '(counsel-rg . "-g ** -- ") ivy-initial-inputs-alist))
  ;; (push '(counsel-rg . "--hidden -- ") ivy-initial-inputs-alist))
  )
#+END_SRC

** Deft
#+BEGIN_SRC elisp
(setq
 deft-directory "~/gdrive/deft"
 deft-use-filename-as-title t)
#+END_SRC

** Emacs Anywhere
#+BEGIN_SRC elisp
(defun markdown-window-p (window-title)
  "Judges from WINDOW-TITLE whether the current window likes markdown"
  (string-match-p (rx (or "Pull Request" "Issue" "Slack"))
                  window-title))

(defun ea-popup-handler (app-name window-title x y w h)
  (interactive)
  (set-frame-size (selected-frame) 120 18)
  ;; set major mode
  (message (concat "called from " window-title))
  (cond
   ((markdown-window-p window-title) (gfm-mode))
   ;; default major mode
   (t (org-mode)))

  ;; doest' work on OSX
  (when (gui-get-selection 'PRIMARY)
    (insert (gui-get-selection 'PRIMARY)))

  (evil-insert-state)

  (local-set-key
   (kbd "C-c C-c") (lambda () (interactive)
                     (local-unset-key (kbd "C-c C-c"))
                     (delete-frame)))
  )
(add-hook 'ea-popup-hook #'ea-popup-handler)
#+END_SRC

** Evil
*** general
#+begin_src elisp
(setq evil-want-C-i-jump t)
#+end_src

*** Stay on the original character when leaving insert mode
#+BEGIN_SRC elisp
(setq
 evil-move-cursor-back nil
 evil-shift-round nil)
#+END_SRC

*** Disable arrow keys
#+BEGIN_SRC elisp
(define-key evil-insert-state-map [left] 'undefined)
(define-key evil-insert-state-map [right] 'undefined)
(define-key evil-insert-state-map [up] 'undefined)
(define-key evil-insert-state-map [down] 'undefined)
(define-key evil-motion-state-map [left] 'undefined)
(define-key evil-motion-state-map [right] 'undefined)
(define-key evil-motion-state-map [up] 'undefined)
(define-key evil-motion-state-map [down] 'undefined)
#+END_SRC

*** Disable mouse
Mouse is to far from the hand.
#+BEGIN_SRC elisp
(defun nothing())
(define-key evil-normal-state-map (kbd "<down-mouse-1>") 'nothing)
(dolist (mouse '("<mouse-1>" "<mouse-2>" "<mouse-3>"
                 "<up-mouse-1>" "<up-mouse-2>" "<up-mouse-3>"
                 "<down-mouse-1>" "<down-mouse-2>" "<down-mouse-3>"
                 "<drag-mouse-1>" "<drag-mouse-2>" "<drag-mouse-3>"
                 "<mouse-4>" "<mouse-5>"
                 "<up-mouse-4>" "<up-mouse-5>"
                 "<down-mouse-4>" "<down-mouse-5>"
                 "<drag-mouse-4>" "<drag-mouse-5>"
                 "<wheel-up>" "<wheel-down>" "<wheel-left>" "<wheel-right>"))
  (global-unset-key (kbd mouse)))
(fset 'evil-visual-update-x-selection 'ignore)
#+END_SRC

** Exec Path From Shell
TODO: testing doom env
#+BEGIN_SRC elisp
;; (setq
;;  exec-path-from-shell-check-startup-files nil
;;  exec-path-from-shell-variables '("PATH" "GOPATH" "GOROOT"))
;; (exec-path-from-shell-initialize)
#+END_SRC

** Git Link
#+BEGIN_SRC elisp
(setq git-link-open-in-browser t)
#+END_SRC

** Google Translate
#+BEGIN_SRC elisp
(setq google-translate-default-source-language "en"
      google-translate-default-target-language "sp")
#+END_SRC
** Highlight Thing
#+BEGIN_SRC elisp
(after! highlight-thing-mode
  (setq
   ;; highlight-thing-limit-to-region-in-large-buffers-p t
   highlight-thing-limit-to-region-in-large-buffers-p nil
   highlight-thing-narrow-region-lines 15
   highlight-thing-large-buffer-limit 5000
   highlight-thing-case-sensitive-p t
   highlight-thing-limit-to-defun t
   highlight-thing-exclude-thing-under-point t))

(doom-themes-set-faces nil
  '(highlight-thing :foreground "orange" :background "black"))

(add-hook! '(prog-mode-hook conf-mode yaml-mode elisp-mode) #'highlight-thing-mode)
#+END_SRC

** Ivy
*** Remove ./ and ../ from file commands
#+BEGIN_SRC elisp
(setq
 ivy-extra-directories nil)
#+END_SRC
*** Show hydra when pressing C-o
#+BEGIN_SRC elisp
(setq ivy-read-action-function #'ivy-hydra-read-action)
#+END_SRC
*** childframe fixed position
#+BEGIN_SRC elisp
(after! ivy-posframe
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left))))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center))))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display))))
#+END_SRC

** Magit

*** Tune magit
#+BEGIN_SRC elisp
(after! magit
    (setq magit-refs-show-commit-count nil
        magit-diff-refine-hunk t ;; show whitespaces changes on the selected git diff hunks
        magit-revision-show-gravatars nil
        magit-process-popup-time -1
        magit-branch-rename-push-target nil
        magit-log-arguments '("-n50" "--decorate")  ;; was: '("-n256" "--graph" "--decorate")
        magit-log-section-arguments  '("-n50" "--decorate") ;; was: ("-n256" "--decorate")
        magit-log-select-arguments '("-n50" "--decorate")  ;; was: '("-n256" "--decorate")
        ;; magit hunk highlight whitespace, https://github.com/magit/magit/issues/1689
        smerge-refine-ignore-whitespace nil
        magit-diff-paint-whitespace-lines 'all
        magit-commit-show-diff nil
        magit-section-initial-visibility-alist '((stashes . hide) (unpushed . show))
        ;; magit-display-buffer-function 'diego/magit-to-the-right
        magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1
        )
        ;; https://github.com/magit/magit/issues/4017
        ;;magit-insert-tags-header
    ; (setq magit-refresh-verbose t) to see timings
    (remove-hook! 'magit-status-sections-hook #'(
        ;; magit-insert-status-headers
        magit-insert-unpushed-to-pushremote
        magit-insert-unpulled-from-pushremote
        magit-insert-unpulled-from-upstream
        magit-insert-unpushed-to-upstream-or-recent))
    ;; automatic spellchecking in commit messages
    (add-hook 'git-commit-setup-hook #'git-commit-turn-on-flyspell))
    (remove-hook! 'magit-refs-sections-hook 'magit-insert-tags) ;; remove tags from ref section
    ;; (remove-hook! 'server-switch-hook 'magit-commit-diff)) ;; remove diff on commiting
#+END_SRC

*** Set project list
#+BEGIN_SRC elisp
(after! magit
  (setq magit-repository-directories
        '(
          ("~/src/github.com/Shopify" . 2)
          ("~/code/" . 2)
          ("~/dotfiles/" . 1))))
#+END_SRC

** Projectile
#+BEGIN_SRC elisp
(after! magit
  (after! projectile
    (mapc #'projectile-add-known-project
          (mapcar #'file-name-as-directory (magit-list-repos)))
    ;; Optionally write to persistent `projectile-known-projects-file'
    (projectile-save-known-projects)))
#+END_SRC

** tl;dr
#+BEGIN_SRC elisp
(after! tldr
  (setq tldr-directory-path (concat doom-etc-dir "tldr/")))
#+END_SRC
** elfeed
#+BEGIN_SRC elisp
(after! elfeed
  ;; (doom-themes-set-faces nil
  ;; '(elfeed-search-tag-face :foreground "#98c379")
  ;; '(elfeed-search-feed-face :foreground "#e5c07b")
  ;; '(elfeed-search-unread-title-face :foreground "#bbc2cf")
  ;; '(elfeed-search-title-face :foreground "#565c64"))
  (setq elfeed-search-filter "@2-weeks-ago +unread"
        elfeed-search-title-max-width 100
        elfeed-search-date-format '("%a %b-%d" 10 :left)
        elfeed-sort-order 'ascending))

(after! elfeed-search
  (defun diego/disable-font-lock-mode ()
    (font-lock-mode -1))
  (add-hook! 'elfeed-search-mode-hook #'(diego/disable-font-lock-mode diego/olivetti-mode)))
#+END_SRC

** engine-mode
#+BEGIN_SRC elisp
  (after! engine-mode
    (engine-mode t)
    (defengine giphy "https://giphy.com/search/%s")
    (defengine github "https://github.com/search?ref=simplesearch&q=%s")
    (defengine google "https://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")
    (defengine powerthesaurus "https://www.powerthesaurus.org/%s/synonyms")
    (defengine stack-overflow "https://stackoverflow.com/search?q=%s")
    (defengine tenor "https://tenor.com/search/%s-gifs")
    (defengine twitter "https://twitter.com/search?q=%s"))
#+END_SRC
** atomic-chrome
#+BEGIN_SRC elisp
(setq atomic-chrome-default-major-mode 'gfm-mode)
(atomic-chrome-start-server)
#+END_SRC

* Misc
** Set default modes to some specific file extensions
#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.aliases\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.yml.erb\\'" . yaml-mode))
#+END_SRC

** Popup rules
#+BEGIN_SRC elisp
(set-popup-rule! "^\\*doom:vterm*" :side 'right :select t :quit t :size 90)
(set-popup-rule! "^\\*kubel - *" :side 'right :size 100 :select t :quit t)
(set-popup-rule! "^\\*Messages\\*" :select t :quit t)
(set-popup-rule! "^\\*tldr\\*" :size 82 :side 'right :select t :quit t)
(set-popup-rule! "^\\* Merriam-Webster Thesaurus \\*" :size 100 :side 'right :select t :quit t)
(set-popup-rule! "^CAPTURE-.*\\.org$" :quit nil :select t :autosave t)
;; (set-popup-rule! "^\\(?:\\*magit\\|magit:\\| \\*transient\\*\\)" :ignore nil :side 'right :select t)
#+END_SRC

* Doom
** Leader key similar to Spacemacs SPC-m
#+BEGIN_SRC elisp
(setq doom-localleader-key ",")
#+END_SRC

** Load private modules
#+BEGIN_SRC elisp
(load! "+funcs")
#+END_SRC
** Bindings
#+BEGIN_SRC elisp
(load! "+bindings")
#+END_SRC

** Disable inserting the comment syntax on newlines when editing an existing comment
#+BEGIN_SRC elisp
(setq +evil-want-o/O-to-continue-comments nil)
#+END_SRC

** keycast
#+BEGIN_SRC elisp
(after! keycast
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line."
    :global t
    (if keycast-mode
        (add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast-mode-line-update)))
  (setq keycast-substitute-alist '((evil-next-line nil nil)
                                   (evil-previous-line nil nil)
                                   (evil-forward-char nil nil)
                                   (evil-backward-char nil nil)
                                   (ivy-done nil nil)
                                   (self-insert-command nil nil))))
(add-to-list 'global-mode-string '("" mode-line-keycast))
(keycast-mode)
#+END_SRC
** workspaces
#+BEGIN_SRC elisp
(setq +workspaces-on-switch-project-behavior t)
#+END_SRC
** pretty-code
Use pretty-code for the ligatures only, and not for symbols.
#+BEGIN_SRC elisp
(setq +pretty-code-symbols nil)
#+END_SRC
** Completion
Fix company causing minibuffer region to disappear (e.g. lsp ask root dialogue).
#+BEGIN_SRC elisp
(after! company
  (remove-hook 'evil-normal-state-entry-hook #'company-abort))
#+END_SRC
** imenu
#+BEGIN_SRC elisp
(setq org-imenu-depth 6)
#+END_SRC
#+END_SRC

** gnutls
#+BEGIN_SRC elisp
;; (after! gnutls
;;   (add-to-list 'gnutls-trustfiles "/usr/local/etc/libressl/cert.pem"))
#+END_SRC
** olivetti
#+BEGIN_SRC elisp
(after! olivetti
  (setq olivetti-minimum-body-width 150
        olivetti-recall-visual-line-mode-entry-state t))

(define-minor-mode diego/olivetti-mode
  "Toggle buffer-local `olivetti-mode' with additional parameters."
  :init-value nil
  :global nil
  (if diego/olivetti-mode
      (progn
        (olivetti-mode 1)
        (set-window-fringes (selected-window) 0 0))
    (olivetti-mode -1)
    (set-window-fringes (selected-window) nil)))
#+END_SRC
** so-long
#+BEGIN_SRC elisp
(setq so-long-max-lines 1)
(add-to-list 'auto-mode-alist '("\\.yml.erb\\'" . so-long-mode))
#+END_SRC
